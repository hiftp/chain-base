<odoo>

    <record model="ir.module.category" id="module_category_project_scrum">
        <field name="name">Project Scrum</field>
    </record>

    <record model="res.groups" id="group_scrum_master">
        <field name="name">Scrum Master</field>
        <field name="category_id" ref="module_category_project_scrum" />
        <field name="implied_ids" eval="[(4, ref('project.group_project_user'))]" />
    </record>

    <record model="res.groups" id="group_scrum_developer">
        <field name="name">Developer</field>
        <field name="category_id" ref="module_category_project_scrum" />
        <field name="implied_ids" eval="[(4, ref('project.group_project_user'))]" />
    </record>

    <record model="res.groups" id="group_scrum_owner">
        <field name="name">Product Owner</field>
        <field name="category_id" ref="module_category_project_scrum" />
        <field name="implied_ids" eval="[(4, ref('project.group_project_user'))]" />
        <field name="users" eval="[(4,ref('base.user_admin'))]" />
    </record>

    <!-- todo : so that the leader can add a member to the team, he must be
        in the group group_system (Administration : Droit d'accÃ¨s) -->

        <function name="write" model="ir.model.data">
            <function name="search" model = "ir.model.data">
                <value eval="[('module', '=', 'project'), ('name','=','project_public_members_rule')]"/>
            </function>
            <value eval ="{'noupdate': False}"/>
        </function>

        <record model="ir.rule" id="project.project_public_members_rule">
            <field name="name">Record Rule: Project Developer</field>
            <field name="model_id" ref="project.model_project_project"/>
            <field name="domain_force">[('team_id', '=', user.scrum_devteam_id.id),('team_id', '!=', False)]</field>
            <field name="groups" eval="[(3, ref('base.group_user')),(4, ref('project_scrum_agile.group_scrum_developer'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='False'/>
            <field name='perm_unlink' eval='False'/>
            <field name='perm_write' eval='False'/>
        </record>

        <function name="write" model="ir.model.data">
            <function name="search" model = "ir.model.data">
                <value eval="[('module', '=', 'project'), ('name','=','task_visibility_rule')]"/>
            </function>
            <value eval ="{'noupdate': False}"/>
        </function>

        <record model="ir.rule" id="project.task_visibility_rule">
            <field name="name">Project/Task: Project Developer</field>
            <field name="model_id" ref="project.model_project_task"/>
            <field name="domain_force">[
                '|',
                    ('project_id.privacy_visibility', '!=', 'followers'),
                    '|',
                        ('project_id.message_partner_ids', 'in', [user.partner_id.id]),
                        '|',
                            ('message_partner_ids', 'in', [user.partner_id.id]),
                            # to subscribe check access to the record, follower is not enough at creation
                            ('user_ids', 'in', user.id)
                ]</field>
            <field name="groups" eval="[(3, ref('base.group_user')),(4, ref('project_scrum_agile.group_scrum_developer'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>

         <function name="write" model="ir.model.data">
            <function name="search" model = "ir.model.data">
                <value eval="[('module', '=', 'project'), ('name','=','project_project_rule_portal')]"/>
            </function>
            <value eval ="{'noupdate': False}"/>
        </function>

        <record id="project.project_project_rule_portal" model="ir.rule">
            <field name="name">Project: portal users: Project Developer</field>
            <field name="model_id" ref="project.model_project_project"/>
            <field name="domain_force">[
            '&amp;',
                ('privacy_visibility', '=', 'portal'),
                ('message_partner_ids', 'child_of', [user.partner_id.commercial_partner_id.id]),
        ]</field>
            <field name="groups" eval="[(3, ref('base.group_portal')),(4, ref('project_scrum_agile.group_scrum_developer'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='False'/>
            <field name='perm_unlink' eval='False'/>
            <field name='perm_write' eval='False'/>
        </record>

        <function name="write" model="ir.model.data">
            <function name="search" model = "ir.model.data">
                <value eval="[('module', '=', 'project'), ('name','=','project_project_manager_rule')]"/>
            </function>
            <value eval ="{'noupdate': False}"/>
        </function>

        <record id="project.project_project_manager_rule" model="ir.rule">
            <field name="name">Project Portal users: Project Developer</field>
            <field name="model_id" ref="project.model_project_project"/>
            <field name="domain_force">[(1, '=', 1)]</field>
            <field name="groups" eval="[(4, ref('project.group_project_manager')),(4, ref('project_scrum_agile.group_scrum_master'))]"/>
        </record>

        <record model="ir.rule" id="project_crum_owner_rule">
            <field name="name">Record Rule: Project Scrum Owner</field>
            <field name="model_id" ref="project.model_project_project"/>
            <field name="domain_force">[('product_owner_id', '=', user.id)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_owner'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='False'/>
            <field name='perm_unlink' eval='False'/>
            <field name='perm_write' eval='True'/>
        </record>

        <record model="ir.rule" id="project_task_crum_owner_rule">
            <field name="name">Project/Task: Scrum Owner </field>
            <field name="model_id" ref="project.model_project_task"/>
            <field name="domain_force">[('project_id.product_owner_id', '=', user.id)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_owner'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='False'/>
            <field name='perm_unlink' eval='False'/>
            <field name='perm_write' eval='True'/>
        </record>

        <!-- project.scrum.sprint -->
        <record model="ir.rule" id="project_scrum_sprint_developer_rule">
            <field name="name">Project Scrum Sprint: Can see his Own sprints</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_sprint"/>
            <field name="domain_force">[('project_id.team_id', '=', user.scrum_devteam_id.id)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_developer'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>
        <record model="ir.rule" id="project_scrum_sprint_product_owner_rule">
            <field name="name">Project Scrum Sprint: can see his Projects</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_sprint"/>
            <field name="domain_force">[('product_owner_id', '=', user.id)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_owner'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>
        <record model="ir.rule" id="project_scrum_sprint_scrum_master_rule">
            <field name="name">Project Scrum Sprint: See all Projects</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_sprint"/>
            <field name="domain_force">[(1, '=', 1)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_master'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>

        <!-- project.scrum.release -->
        <record model="ir.rule" id="project_scrum_release_developer_rule">
            <field name="name">Project Scrum Release: See his/her own release</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_release"/>
            <field name="domain_force">[('project_id.team_id', '=', user.scrum_devteam_id.id)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_developer'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>
        <record model="ir.rule" id="project_scrum_release_owner_master_rule">
            <field name="name">Project Scrum Release: All Releases</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_release"/>
            <field name="domain_force">[(1, '=', 1)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_master')),(4, ref('project_scrum_agile.group_scrum_owner'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>

        <!-- project.scrum.product.backlog -->
        <record model="ir.rule" id="project_scrum_product_backlog_developer_rule">
            <field name="name">Project Scrum Product backlog: See his/her own backlogs</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_product_backlog"/>
            <field name="domain_force">[('project_id.team_id', '=', user.scrum_devteam_id.id)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_developer'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>
        <record model="ir.rule" id="project_scrum_product_backlog_owner_master_rule">
            <field name="name">Project Scrum Product backlog: All Backlogs</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_product_backlog"/>
            <field name="domain_force">[(1, '=', 1)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_master')),(4, ref('project_scrum_agile.group_scrum_owner'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>

        <!-- project scrum sandbox -->
        <record model="ir.rule" id="project_scrum_sandbox_developer_rule">
            <field name="name">Project Scrum Sandbox: See his/her own Sandbox</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_sandbox"/>
            <field name="domain_force">['|',('project_id.team_id', '=', user.scrum_devteam_id.id),('developer_id','=',user.id)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_developer'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>
        <record model="ir.rule" id="project_scrum_sandbox_owner_master_rule">
            <field name="name">Project Scrum Sandbox: All Sandbox</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_sandbox"/>
            <field name="domain_force">[(1, '=', 1)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_master')),(4, ref('project_scrum_agile.group_scrum_owner'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>

        <!-- project.scrum.meeting -->
        <record model="ir.rule" id="project_scrum_meeting_developer_rule">
            <field name="name">Project Scrum Meeting: See his/her own Meeting</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_meeting"/>
            <field name="domain_force">[('project_id.team_id', '=', user.scrum_devteam_id.id)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_developer'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>

        <record model="ir.rule" id="project_scrum_meeting_owner_master_rule">
            <field name="name">Project Scrum Meeting: All Meeting</field>
            <field name="model_id" ref="project_scrum_agile.model_project_scrum_meeting"/>
            <field name="domain_force">[(1, '=', 1)]</field>
            <field name="groups" eval="[(4, ref('project_scrum_agile.group_scrum_master')),(4, ref('project_scrum_agile.group_scrum_owner'))]"/>
            <field name='perm_read' eval='True'/>
            <field name='perm_create' eval='True'/>
            <field name='perm_unlink' eval='True'/>
            <field name='perm_write' eval='True'/>
        </record>

        <record id="rule_project_project_team_member_1" model="ir.rule">
        <field name="name">Project Team Member</field>
        <field name="model_id" ref="project.model_project_project"/>
        <field name="global" eval="True"/>
        <field name="domain_force">['|',('favorite_user_ids', 'in', user.id),('resource_ids','in',user.partner_id.id)]</field>
        <field name="groups" eval="[(4, ref('project_management_security.group_team_member'))]"/>
    </record>

    <record id="project_member_rule" model="ir.rule" >
        <field name="name">Project: Project Member Rule</field>
        <field name="model_id" ref="project.model_project_project"/>
        <field name="domain_force">['|',('favorite_user_ids', 'in', user.id),('resource_ids','in',user.partner_id.id)]</field>
        <field name="groups" eval="[(4, ref('project.group_project_user'))]"/>
    </record>

    <record id="project_supplier_project_coordinator_rule" model="ir.rule">
        <field name="name">Project: Supplier Project Coordinator Rule</field>
        <field name="model_id" ref="project.model_project_project"/>
        <field name="domain_force">['|',('favorite_user_ids', 'in', user.id),('resource_ids','in',user.partner_id.id)]</field>
        <field name="groups" eval="[(4, ref('project_management_security.group_supp_project_coordinator'))]"/>
    </record>

    <record id="project_project_coordinator_rule" model="ir.rule">
        <field name="name">Project: Project Coordinator Rule</field>
        <field name="model_id" ref="project.model_project_project" />
        <field name="domain_force">['|',('favorite_user_ids', 'in', user.id),('resource_ids','in',user.partner_id.id)]</field>
        <field name="groups" eval="[(4, ref('project_management_security.group_project_coordinator'))]" />
    </record>

    <record id="task_member_rule" model="ir.rule">
        <field name="name">Task: Task Member Rule</field>
        <field name="model_id" ref="project.model_project_task"/>
        <field name="domain_force">['|',('project_id.favorite_user_ids', 'in', user.id),('project_id.resource_ids','in',user.partner_id.id)]</field>
        <field name="groups" eval="[(4, ref('project.group_project_user'))]"/>
    </record>

    <record id="task_supplier_coordinator_rule" model="ir.rule">
        <field name="name">Task: Supplier Coordinator Rule</field>
        <field name="model_id" ref="project.model_project_task" />
        <field name="domain_force">['|',('project_id.favorite_user_ids', 'in', user.id),('project_id.resource_ids','in',user.partner_id.id)]</field>
        <field name="groups" eval="[(4, ref('project_management_security.group_supp_project_coordinator'))]" />
    </record>

    <record id="task_custom_coordinator_rule" model="ir.rule">
        <field name="name">Task: Custom Coordinator Rule</field>
        <field name="model_id" ref="project.model_project_task" />
        <field name="domain_force">['|',('project_id.favorite_user_ids', 'in', user.id),('project_id.resource_ids','in',user.partner_id.id)]</field>
        <field name="groups" eval="[(4, ref('project_management_security.group_project_coordinator'))]" />
    </record>

    <record id="timesheet_supplier_project" model="ir.rule">
        <field name='name'>Timesheet Supplier Project</field>
        <field name='model_id' ref="analytic.model_account_analytic_line"/>
        <field name="domain_force">['|',('project_id.favorite_user_ids','in',user.id),('project_id.resource_ids','in',user.partner_id.id)]</field>
        <field name="groups" eval="[(4, ref('project_management_security.group_supp_project_coordinator'))]"/>
    </record>

</odoo>
